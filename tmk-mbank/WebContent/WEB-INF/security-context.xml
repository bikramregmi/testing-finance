<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2
	       http://www.springframework.org/schema/security/spring-security-oauth2.xsd
	http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">

	<global-method-security jsr250-annotations="enabled" />
	<http pattern="/**/*.css" security="none" />
	<http pattern="/**/*.css.map" security="none" />
	
	
	<http pattern="/**/*.gif" security="none" />
	<http pattern="/**/*.html" security="none"/>
	<http pattern="/**/*.ttf" security="none" />
	<http pattern="/**/*.eot" security="none" />
	<http pattern="/**/*.svg" security="none" />
	<http pattern="/**/*.woff" security="none" />
	<http pattern="/**/*.woff2" security="none" />
	<http pattern="/**/*.xls" security="none" />
	<http pattern="/**/*.ico" security="none" />
	<http pattern="/**/*.jpg" security="none" />
	<http pattern="/**/*.js" security="none" />
	<http pattern="/**/*.png" security="none" />
	<http pattern="/**/*.xml" security="none" />
	<http pattern="/**/*.mp4" security="none" />
	<!--<http pattern="/embed/*" security="none"/> -->
	
		    <!-- Default URL provided by spring to get the token(access and refresh) from oauth -->
		<http pattern="/oauth/token" create-session="stateless"
		      authentication-manager-ref="clientAuthenticationManager"
		      xmlns="http://www.springframework.org/schema/security">
		    <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
		    <http-basic entry-point-ref="clientAuthenticationEntryPoint"/>
		    <!-- Using this to authenticate client using request parameter -->
	        <custom-filter ref="clientCredentialsTokenEndPointFilter" after="BASIC_AUTH_FILTER"/>
		    <access-denied-handler ref="oauthAccessDeniedHandler"/>
		</http>
		
		<!-- The OAuth2 protected resources are separated out into their own block so we can deal with authorization and error handling
	          separately. This isn't mandatory, but it makes it easier to control the behaviour -->
	    <http pattern="/api/**" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
	          xmlns="http://www.springframework.org/schema/security">
	       <anonymous enabled="false"/>
	       <intercept-url pattern="/api/**" access="ROLE_CUSTOMER,ROLE_AUTHENTICATED"/>
	       <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
	       <access-denied-handler ref="oauthAccessDeniedHandler"/>
	    </http>
    
	<http auto-config="true" disable-url-rewriting="true">
		<intercept-url pattern="/Admin/**"
			access="ROLE_ADMINISTRATOR,ROLE_AUTHENTICATED" requires-channel="any" />
		<intercept-url pattern="/Seller/**" access="ROLE_AUTHENTICATED,ROLE_SELLER"
			requires-channel="any" />
		<intercept-url pattern="/login/**" access="IS_AUTHENTICATED_ANONYMOUSLY"
			requires-channel="any" />
		<intercept-url pattern="/" access="IS_AUTHENTICATED_ANONYMOUSLY"
			requires-channel="any" />
		<!-- <remember-me key="remittancerm" /> -->
		<custom-filter position="CONCURRENT_SESSION_FILTER" ref="customSessionFilter" />
		<form-login login-page="/main"
			authentication-failure-url="/login?errormessage=authentication.login.failed"
			always-use-default-target="false" default-target-url="/"
			authentication-success-handler-ref="ash" />
		<logout logout-url="/logout" logout-success-url="/" />
		<access-denied-handler ref="" error-page="/" />

		<session-management
			session-authentication-strategy-ref="sls" />
		<port-mappings>
			<port-mapping http="8080" https="8443" />
		</port-mappings>
	</http>

	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="userDetailService">
			<password-encoder ref="passwordEncoder">
			</password-encoder>
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="ash"
		class="com.mobilebanking.session.CustomSavedRequestAwareAuthenticationSuccessHandler">
	</beans:bean>

	<beans:bean id="forbiddenEntryPoint"
		class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />


	<beans:bean id="customSessionFilter" class="com.mobilebanking.session.CustomSessionFilter">
		<beans:constructor-arg ref="sessionRegistry" />
	</beans:bean>

	<beans:bean id="sls"
		class="com.mobilebanking.session.SessionLoggingStrategy">
		<beans:constructor-arg ref="sas" />
		<beans:constructor-arg ref="sessionLogApi" />
	</beans:bean>

	<beans:bean id="sas"
		class="com.mobilebanking.session.PersistingConcurrentSessionControlStrategy">
		<beans:constructor-arg name="sessionRegistry"
			ref="sessionRegistry" />
		<beans:constructor-arg name="sessionApi" ref="sessionApi" />
		<beans:property name="maximumSessions" value="-1" />
	</beans:bean>

	<beans:bean id="sessionRegistry"
		class="com.mobilebanking.session.PersistingSessionRegistry">
		<beans:constructor-arg ref="sessionApi" />
	</beans:bean>

	<beans:bean id="userDetailService"
		class="com.mobilebanking.session.UserDetailsServiceImpl">
		<beans:constructor-arg ref="userRepository" />
	</beans:bean>

	<beans:bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
		

	<beans:bean id="userTest" class="com.mobilebanking.session.UserTest">
		<beans:constructor-arg ref="userRepository" />
	</beans:bean>
	
	
	 <!-- OAuth2 Security  -->
	 <!-- Load User By User name -->
	 <beans:bean id="clientDetailsUserDetailsService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
	    <beans:constructor-arg ref="jdbcClientDetailsService"/>
	 </beans:bean>

	 <!-- It Determine whether a given client authentication request has been approved by user or not -->
	 <!-- ToeknStoreUserApprovalHandler : A user approval handler that remembers approval decisions by consulting existing tokens -->
	 <beans:bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
	    <beans:property name="tokenStore" ref="jdbcTokenStore"/>
	    <beans:property name="requestFactory" ref="oauth2RequestFactory"/>
	 </beans:bean>
	 
	 
	 <!-- Server issuing access token to the client after successfully authenticating the resource owner and obtaining authorization -->
	 <oauth2:authorization-server client-details-service-ref="jdbcClientDetailsService" token-services-ref="defaultTokenService"
	             user-approval-handler-ref="userApprovalHandler">
	     <!-- <oauth2:authorization-code/> -->
	     <!-- <oauth2:client-credentials/> -->
	     <!-- <oauth2:implicit/> -->
	     <oauth2:refresh-token/>
	     <oauth2:password/>
	 </oauth2:authorization-server>
	 
	 <authentication-manager id="clientAuthenticationManager">
	     <authentication-provider user-service-ref="clientDetailsUserDetailsService"/>
	 </authentication-manager>
	 
	 <!-- Include this if you need to authenticate client via request parameter -->
	 <beans:bean id="clientCredentialsTokenEndPointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="clientAuthenticationManager" />
	</beans:bean>
	 
	 <!-- Server hosting the protected resource ,capable of accepting and responding to protected resource request using access tokens -->
	 <oauth2:resource-server id="resourceServerFilter" resource-id="mBankTest" token-services-ref="defaultTokenService"/>
	 
	 <!-- Authentication Entry Point -->
	 <beans:bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
       <beans:property name="realmName" value="test" />
     </beans:bean>

     <beans:bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="test" />
        <beans:property name="typeName" value="Basic" />
     </beans:bean>
	
	<!-- Access Denied Handler -->
	<beans:bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>
	
	<!-- This beans prepares oauth2Request using incoming request parameter -->
	<beans:bean id="oauth2RequestFactory" class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
	  <beans:constructor-arg ref="jdbcClientDetailsService"/>
	</beans:bean>
	
	<!-- Access Decision Manager -->
	<beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" xmlns="http://www.springframework.org/schema/beans">
      <beans:constructor-arg>
		<beans:list>
			<beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
			<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
			<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			<beans:bean class="org.springframework.security.web.access.expression.WebExpressionVoter"/>
		</beans:list>
	</beans:constructor-arg>
	</beans:bean>
	
	<!-- Data Source For oauth2 -->
	<!-- <beans:bean id="oauthDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	   <beans:property name="driverClassName" value="com.mysql.jdbc.Driver"/>
	   <beans:property name="url" value="jdbc:mysql://localhost:3306/oauth_db"/>
	   <beans:property name="username" value="root"/>
	   <beans:property name="password" value=""/>
	</beans:bean> -->
	
	<!-- JDBC Token Store -->
	<beans:bean id="jdbcTokenStore" class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
	   <beans:constructor-arg ref="dataSource"/>
	</beans:bean>
	
	<!-- Default token Service using JDBC token store-->
	<beans:bean id="defaultTokenService" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
	   <beans:property name="tokenStore" ref="jdbcTokenStore"/>
	   <beans:property name="refreshTokenValiditySeconds" value="1000"/>
	   <beans:property name="accessTokenValiditySeconds" value="1100"/>
	   <beans:property name="supportRefreshToken" value="true"/>
	   <!-- <beans:property name="clientDetailsService" ref="clientDetails"/> -->
	   <beans:property name="clientDetailsService" ref="jdbcClientDetailsService"/>
	   <beans:property name="tokenEnhancer" ref="tokenEnhancer"/>
	</beans:bean>
	
	<!-- JDBC Client Details Service -->
	<beans:bean id="jdbcClientDetailsService" class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService">
	  <beans:constructor-arg ref="dataSource"/>
	</beans:bean>
	
	<!-- Custom Token Enhancer -->
	<beans:bean id="tokenEnhancer" class="com.mobilebanking.oauth.CustomTokenEnhancer"/>
	
</beans:beans>